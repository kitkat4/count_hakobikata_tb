
# その車両の通ることのできる場所をおおまかに指定するwaypointや、
# 特別な役割（荷物を取る/降ろすことが可能など）を持つwaypointの別名であるstationを
# CSVファイルとして指定する。
# シナリオ生成ファイルから転記する。
# これらの設定はフォークリフトとトラックなど、車両の種類ごとに使い分ける必要があるので、
# 後述するvehicle_typeごとに指定する。
# 不使用のファイルにはnullを指定する。
layouts:
  forklift:
    waypoint_list: "waypoint_list_forklift.csv"
    station_list: "station_list_forklift.csv"
  truck:
    waypoint_list: "waypoint_list_truck.csv"
    station_list: null


# 登場する車両（=能動的に動く存在）を配列で記述する。人間は現時点では考慮しない。
# シナリオ生成ファイルから転記する。
vehicles:
  - vehicle_id: 1                # vehicle間で重複のない整数
    vehicle_type: forklift       # 当面、以下があれば足りるはず：forklift (フォークリフト）, truck （トラック）
    name: agf1                   # vehicle間で重複のない任意の文字列
    initial_pose:                # 初期位置・姿勢を指定
      waypoint: 50               # 初期位置は必ずいずれかのwaypointとする。
      theta_deg: 180              # waypointは位置しか指定できないので、姿勢を別途指定している。world座標系。[deg]
    description: "fbr.urdf"      # リンク構造を記述する設定ファイル(URDF)のパス。ファイル名に命名規則は設けない
    max_velocity: 1.0            # 最大車速を[m/s]で指定
    restrictions:
      available_stations: # stationリスト中の特定のstationのみ使用させる場合は配列で指定する
        - TruckL1
        - TruckL2
        - TruckL3
        - TruckL4
        - TruckL5
        - TruckL6
        - TruckL7
        - TruckL8
        - Platform1
        - Platform2
        - Platform3
        - Temp1
        - Temp2
        - Temp3
        - Temp4
        - Temp5
        - Temp6
  - vehicle_id: 2
    vehicle_type: truck
    name: elf
    initial_pose:
      waypoint: 1000
      theta_deg: 90
    description: "sample_truck.urdf"
    max_velocity: 5.0
    restrictions: null # すべてのstationを利用可能な場合やそもそもstation_listを使用しない場合はnull

# 登場する物体（=全く動かないか、他の車両に追随して動く存在）を配列で記述する。
# 現時点では、シナリオ生成ファイルから転記することにする。
objects:
  - object_id: 1                # object間で重複のない整数
    stick_to: "truck::nidai"    # 何と連動して動くかを、名前空間で区切ったリンク名で記載する。動かない物体の場合はnullを指定することを想定するが、当面は動く物体（荷物）だけ考えれば良いように思う。
    name: pallet1               # object間で重複のない文字列
    associated_station:
      vehicle_type: forklift
      station: TruckL1
    initial_pose:               # 初期位置・姿勢を指定する。
      # 初期位置・姿勢を記述するための座標系を指定する。グローバル座標系の場合worldを指定する。
      # ローカル座標系の場合、::で名前空間を区切りながら座標系の名前を指定するものとし、最初の1個はvehicleの名前、それ以降はURDFで記述したリンクの名前（例：agf1::innermast）。
      frame_id: "truck::nidai"
      x_m: -5
      y_m: 1.5
      z_m: 1.0
      theta_deg: 90
  - object_id: 2
    stick_to: "truck::nidai"
    name: pallet2
    associated_station:
      vehicle_type: forklift
      station: TruckL2
    initial_pose:
      frame_id: "truck::nidai"
      x_m: -5
      y_m: 2.7
      z_m: 1.0
      theta_deg: 90

# 車両たちの実行する動作を指定する.
actions:
  - action_id: 101              # 他のactionと重複しない任意の整数。
    vehicle_id: 1               # どのvehicleが実行するactionなのかを指定
    type: move_object           # 動作の種類を指定する。指定可能な動作の種類はvehicle_typeごとに制限がある。move_objectは荷物を運ぶ動作で、forkliftのみが実行可能。
    after: []                   # action_idの配列を指定する。指定されたactionが完了するまでこのactionを実行しない。すぐ始めてもいいなら空配列とする
    config:                     # 動作の詳細を記述する。typeごとに指定できる項目が異なる。
      src_waypoint: 10          # 荷物を取る動作をするwaypointのID
      dst_waypoint: 20          # 荷物を置く動作をするwaypointのID
      # 運ぶ物体のIDを指定する。運ぶ物体がsrc_waypointの眼の前にあることを想定しているが、チェックしない。
      # src_waypointに車両が到着して、爪を挿す動きをしたら、target_objectで指定した荷物が爪にワープして吸着する。
      target_object: 1
  - action_id: 102
    vehicle_id: 1
    type: move_object
    after: [101]
    config:
      src_waypoint: 10
      dst_waypoint: 20
      target_object: 2
  - action_id: 103
    vehicle_id: 2
    type: wait                  # waitは指定した時間だけ何もせず静止する。どんなvehicle_typeでも実行できる。
    after: []
    config:
      sec: 10                   # 静止する時間を記載する
  # - action_id: 104
  #   vehicle_id: 2
  #   type: close_wings         # ウイングトラックの荷台の扉を閉める動作なども最終的にはあったほうが良いが、当面考えなくても良いと思う。
  #   after: []
  #   config: null              # 特に指定すべき詳細のないtypeであれば、nullとする。
  - action_id: 104
    vehicle_id: 2
    type: move                  # moveは指定したwaypointまで移動する。どんなvehicle_typeでも実行できる。
    after: [101,
    config:
      dst_waypoint: 100         # 移動先をwaypointのIDで指定する
      


